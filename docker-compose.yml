version: "3.8"

services:
  # Proxy READ-ONLY su tutti i nodi (solo GET)
  dsproxy_ro:
    image: tecnativa/docker-socket-proxy:latest
    networks:
      - dockerapi
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
          - node.platform.os == linux
    environment:
      # Sezioni per sola lettura necessarie
      CONTAINERS: "1"
      SERVICES: "1"
      TASKS: "1"
      NODES: "1"
      INFO: "1"
      SYSTEM: "1"
      VERSION: "1"
      EVENTS: "1"
      PING: "1"
      POST: "0"        # Niente scritture da questo proxy
      LOG_LEVEL: "${PROXY_LOG_LEVEL:-info}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: autoscaler-haproxy
        target: /usr/local/etc/haproxy/haproxy.cfg.template
        mode: 0444
    # hardened
    #read_only: true
    tmpfs:
      - /run
      - /tmp
      - /usr/local/etc/haproxy

  # Proxy READ-WRITE singolo sui manager per fare update servizi
  dsproxy_rw:
    image: tecnativa/docker-socket-proxy:latest
    networks:
      - dockerapi
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.manager == 00
    environment:
      CONTAINERS: 1
      SERVICES: "1"    # Necessario per GET/POST servizi
      TASKS: "1"
      INFO: "1"
      SYSTEM: "1"
      VERSION: "1"
      EVENTS: "1"
      PING: "1"
      POST: "1"        # Abilita operazioni di update
      # Non abilitiamo CONTAINERS qui per minimizzare i permessi
      LOG_LEVEL: "${PROXY_LOG_LEVEL:-info}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: autoscaler-haproxy
        target: /usr/local/etc/haproxy/haproxy.cfg.template
        mode: 0444
    #read_only: true
    tmpfs:
      - /run
      - /tmp
      - /usr/local/etc/haproxy

  autoscaler:
    image: registry.devarch.local:443/devarch-it/docker-autoscaler:v0.6
    networks:
      - dockerapi
    environment:
      # DNS RR di tutte le istanze globali del proxy RO
      READONLY_PROXY_DNS: "tasks.dsproxy_ro"
      READONLY_PROXY_PORT: "2375"
      # Proxy RW per aggiornare i servizi (VIP singolo)
      MANAGER_PROXY_HOST: "http://dsproxy_rw:2375"
      POLL_INTERVAL: "15"
      DEFAULT_COOLDOWN: "120"
      LABEL_PREFIX: "autoscale"
      LOG_LEVEL: "${AUTOSCALER_LOG_LEVEL:-info}"
      # Boundaries di sicurezza (fallback se mancanti sui servizi)
      DEFAULT_MIN_REPLICAS: "1"
      DEFAULT_MAX_REPLICAS: "50"
    secrets:
      - source: autoscaler-smtp
        target: /config/smtp.yml
        mode: 0444
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.manager == 00
      restart_policy:
        condition: any

  dashboard:
    image: registry.devarch.local:443/devarch-it/docker-autoscaler-dash:v0.2
    networks:
      - dockerapi
      - traefik-net
    environment:
      DOCKER_API_URL: "http://dsproxy_rw:2375"
      DOCKER_API_VERSION: "v1.49"
      LOG_LEVEL: "${DASHBOARD_LOG_LEVEL_:-info}"
    expose:
      - "8080"
    deploy:
      labels:
        traefik.http.services.autoscaler.loadbalancer.passHostHeader: 'true'
        traefik.http.routers.autoscaler.rule: Host(`autoscaler-dkrdev.devarch.local`)
        traefik.http.services.autoscaler.loadbalancer.server.port: '8080'
        traefik.http.routers.autoscaler.entrypoints: https
        traefik.http.routers.autoscaler.tls: 'true'
        traefik.enable: 'true'
      replicas: 1
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
          - node.labels.manager == 00

configs:
  autoscaler-haproxy:
    external: true

secrets:
  autoscaler-smtp:
    external: true

networks:
  dockerapi:
    driver: overlay
    attachable: true
  traefik-net:
    external: true
