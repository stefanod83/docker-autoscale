services:
  autoscaler:
    #build: ./autoscaler
    image: registry.devarch.local:443/devarch-it/docker-autoscaler:v0.1
    volumes:
      - ${CONFIG_PATH}/autoscaler/config.yml:/app/config.yml:ro
    environment:
      - SWARMPIT_URL=${SWARMPIT_URL_INT}/api
      - SWARMPIT_TOKEN=${SWARMPIT_TOKEN}
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
          - node.labels.manager == 00
        restart_policy:
        condition: on-failure
    networks:
      - traefik-net

  dashboard:
    #build: ./dashboard
    image: registry.devarch.local:443/devarch-it/docker-autoscaler-dash:v0.1
    environment:
      - REACT_APP_SWARMPIT_API=${SWARMPIT_URL_EXT}/api
      - REACT_APP_API_TOKEN=${SWARMPIT_TOKEN}
    #ports:
    #  - 8080:80
    deploy:
      labels:
        traefik.http.services.autoscaler.loadbalancer.passHostHeader: 'true'
        traefik.http.routers.autoscaler.rule: Host(`autoscaler-dkrdev.devarch.local`)
        traefik.http.services.autoscaler.loadbalancer.server.port: '80'
        traefik.http.routers.autoscaler.entrypoints: https
        traefik.http.routers.autoscaler.tls: 'true'
        traefik.enable: 'true'
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.manager == 00
      restart_policy:
        condition: on-failure
    networks:
      - traefik-net

networks:
  traefik-net:
    external: true
